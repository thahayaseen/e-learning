import { Router, Request, Response } from "express";
import {
  controller,
  courseController,
  mentorController,
} from "../service/controler.config";

import uploads from "../service/multer";

import { Roles } from "../../app/useCases/enum/User";
import { Middlewares } from "../../config/dependencies";
const router = Router();
router.get("/categorys", mentorController.getcategorys.bind(mentorController));
router.post(
  "/addcourse",
  Middlewares.jwtVerify,
  Middlewares.roleChecker(Roles.MENTOR),
  courseController.createCourses.bind(courseController)
);
router.get(
  "/courses",
  Middlewares.jwtVerify,
  Middlewares.roleChecker(Roles.MENTOR),
  courseController.getCourses.bind(courseController)
);

router.get(
  "/lessons/:lessonid",
  Middlewares.jwtVerify,
  Middlewares.roleChecker([Roles.MENTOR,Roles.ADMIN]),
  courseController.controlergetLesson.bind(courseController)
);
router.post(
  "/action/:id",
  Middlewares.jwtVerify,
  Middlewares.roleChecker(Roles.ADMIN),
  mentorController.applayAction.bind(mentorController)
);
router.post(
  "/courseupdate/:courseid",
  Middlewares.jwtVerify,
  Middlewares.roleChecker(Roles.MENTOR),
  mentorController.updateCoursecontroler.bind(mentorController)
);
router.post(
  "/deletelesson/:id",
  Middlewares.jwtVerify,
  Middlewares.roleChecker(Roles.MENTOR),
  mentorController.deleteLesson.bind(mentorController)
);
router.post(
  "/addTask/:lessonid",
  Middlewares.jwtVerify,
  Middlewares.roleChecker(Roles.MENTOR),
  mentorController.addTask.bind(mentorController)
);
router.post(
  "/updatetask/:taskid",
  Middlewares.jwtVerify,
  Middlewares.roleChecker(Roles.MENTOR),
  mentorController.updateTask.bind(mentorController)
);
router.post(
  "/updatelesson/:lessonid",
  Middlewares.jwtVerify,
  Middlewares.roleChecker(Roles.MENTOR),
  mentorController.updataLesson.bind(mentorController)
);
router.post(
  "/addlesson",
  Middlewares.jwtVerify,
  Middlewares.roleChecker(Roles.MENTOR),
  mentorController.addlesson.bind(mentorController)
);
router.post(
  "/course/delete",
  Middlewares.jwtVerify,
  Middlewares.roleChecker(Roles.MENTOR),
  mentorController.deleteCourse.bind(mentorController)
);
router.post(
  "/task/delete",
  Middlewares.jwtVerify,
  Middlewares.roleChecker(Roles.MENTOR),
  mentorController.DeleteTask.bind(mentorController)
);
router.get(
  "/getchats",
  Middlewares.jwtVerify,
  Middlewares.roleChecker(Roles.MENTOR),
  mentorController.getRoomsByid.bind(mentorController)
);
router.get(
  "/getusers",
  Middlewares.jwtVerify,
  Middlewares.roleChecker(Roles.MENTOR),
  mentorController.studentManagment.bind(mentorController)
);
router.get(
  "/getorders",
  Middlewares.jwtVerify,
  Middlewares.roleChecker(Roles.MENTOR),
  mentorController.getorderMentorId.bind(mentorController)
);
router.get(
  "/getrevenue",
  Middlewares.jwtVerify,
  Middlewares.roleChecker(Roles.MENTOR),
  mentorController.getRevenue.bind(mentorController)
);
router.get(
  "/getstate",
  Middlewares.jwtVerify,
  Middlewares.roleChecker(Roles.MENTOR),
  mentorController.getState.bind(mentorController)
);
router.get(
  "/meets",
  Middlewares.jwtVerify,
  Middlewares.roleChecker(Roles.MENTOR),
  mentorController.getMeetings.bind(mentorController)
);
router.put(
  "/meetstatus/:meetid",
  Middlewares.jwtVerify,
  Middlewares.roleChecker(Roles.MENTOR),
  mentorController.updateMeetingStatus.bind(mentorController)
);
router.put(
  "/action-course-list",
  Middlewares.jwtVerify,
  mentorController.ListactionCourse.bind(mentorController)
);
export default router;
